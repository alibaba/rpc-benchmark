#!/usr/bin/env bash

usage() {
    echo "Usage: ${PROGRAM_NAME} command dirname"
    echo "command: [m|s|p|f|c|t|i|T|I|F]"
    echo "         -m [profiling|benchmark], specify benchmark mode"
    echo "         -s hostname, host name"
    echo "         -p port, port number"
    echo "         -f output file path"
    echo "         -c concurrency"
    echo "         -t time used for each warm up iteration"
    echo "         -i iterations number for warm up"
    echo "         -T time used for each measurement iteration"
    echo "         -I iterations number for measurement"
    echo "         -F forks number"
    echo "dirname: test module name"
}


config(){
echo "">./benchmark-common/src/main/resources/benchmark.properties
echo 'server.host='${SERVER}>>./benchmark-common/src/main/resources/benchmark.properties
echo 'server.port='${PORT}>>./benchmark-common/src/main/resources/benchmark.properties
}

build() {
        git clone https://github.com/dubbo/dubbo-serialization-native-hessian.git
        pushd dubbo-benchmark/dubbo-serialization-native-hessian
        mvn clean install
        popd
        pushd thrift-benchmark/
        mvn compile
        mvn clean install
        popd
        mvn clean install
}

java_options() {
    JAVA_OPTIONS="-server -Xmx1g -Xms1g -XX:MaxDirectMemorySize=1g -XX:+UseG1GC \
                 -Dserver.host=${SERVER} \
                 -Dserver.port=${PORT} \
                 -Dbenchmark.output=${OUTPUT} \
                 -Dbenchmark.concurrency=${CONCURRENCY} \
                 -Dbenchmark.warm.up.time=${WARM_UP_TIME} \
                 -Dbenchmark.warm.up.iterations=${WARM_UP_ITERATIONS} \
                 -Dbenchmark.measurement.iterations=${MEASUREMENT_ITERATIONS} \
                 -Dbenchmark.measurement.time=${MEASUREMENT_TIME} \
                 -Dbenchmark.forks=${FORKS}"

    if [[ "x${MODE}" = "xprofiling" ]]; then
        JAVA_OPTIONS="${JAVA_OPTIONS} \
            -XX:+UnlockCommercialFeatures \
            -XX:+FlightRecorder \
            -XX:StartFlightRecording=duration=30s,filename=${PROJECT_DIR}.jfr \
            -XX:FlightRecorderOptions=stackdepth=256"
    fi
}

run() {
    if [[ -d "${PROJECT_DIR}/target" ]]; then
        JAR=`find ${PROJECT_DIR}/target/*.jar | head -n 1`
        echo
        echo "RUN ${PROJECT_DIR} IN ${MODE:-benchmark} MODE"
        CMD="java ${JAVA_OPTIONS} -jar ${JAR}"
        echo "command is: ${CMD}"
        echo
        ${CMD}
    fi
}

PROGRAM_NAME=$0
MODE="benchmark"
SERVER="localhost"
PORT="8080"
OUTPUT=""
CONCURRENCY=32
WARM_UP_TIME=10
WARM_UP_ITERATIONS=3
MEASUREMENT_TIME=10
MEASUREMENT_ITERATIONS=3
FORKS=1
OPTIND=1

while getopts "m:s:p:f:c:t:i:T:I:F:" opt; do
    case "$opt" in
        m)
            MODE=${OPTARG}
            ;;
        s)
            SERVER=${OPTARG}
            ;;
        p)
            PORT=${OPTARG}
            ;;
        f)
            OUTPUT=${OPTARG}
            ;;
        c)
            CONCURRENCY=${OPTARG}
            ;;
	    t)
	        WARM_UP_TIME=${OPTARG}
            ;;
        i)
	        WARM_UP_ITERATIONS=${OPTARG}
            ;;
        T)
	        MEASUREMENT_TIME=${OPTARG}
            ;;
        I)
	        MEASUREMENT_ITERATIONS=${OPTARG}
            ;;
        F)
	        FORKS=${OPTARG}
            ;;
        ?)
            echo ${OPTARG}
            usage
            exit 0
            ;;
    esac
done

shift $((OPTIND-1))
PROJECT_DIR=$1

if [[ ! -d "${PROJECT_DIR}" ]]; then
    usage
    exit 0
fi

config
build
java_options
run






